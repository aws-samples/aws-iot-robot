{"ast":null,"code":"var parseMessage = require('./parse-message').parseMessage;\n\n/**\n *\n * @param {*} parser\n * @param {Buffer} message\n * @param {*} shape\n * @api private\n */\nfunction parseEvent(parser, message, shape) {\n  var parsedMessage = parseMessage(message);\n\n  // check if message is an event or error\n  var messageType = parsedMessage.headers[':message-type'];\n  if (messageType) {\n    if (messageType.value === 'error') {\n      throw parseError(parsedMessage);\n    } else if (messageType.value !== 'event') {\n      // not sure how to parse non-events/non-errors, ignore for now\n      return;\n    }\n  }\n\n  // determine event type\n  var eventType = parsedMessage.headers[':event-type'];\n  // check that the event type is modeled\n  var eventModel = shape.members[eventType.value];\n  if (!eventModel) {\n    return;\n  }\n  var result = {};\n  // check if an event payload exists\n  var eventPayloadMemberName = eventModel.eventPayloadMemberName;\n  if (eventPayloadMemberName) {\n    var payloadShape = eventModel.members[eventPayloadMemberName];\n    // if the shape is binary, return the byte array\n    if (payloadShape.type === 'binary') {\n      result[eventPayloadMemberName] = parsedMessage.body;\n    } else {\n      result[eventPayloadMemberName] = parser.parse(parsedMessage.body.toString(), payloadShape);\n    }\n  }\n\n  // read event headers\n  var eventHeaderNames = eventModel.eventHeaderMemberNames;\n  for (var i = 0; i < eventHeaderNames.length; i++) {\n    var name = eventHeaderNames[i];\n    if (parsedMessage.headers[name]) {\n      // parse the header!\n      result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);\n    }\n  }\n  var output = {};\n  output[eventType.value] = result;\n  return output;\n}\nfunction parseError(message) {\n  var errorCode = message.headers[':error-code'];\n  var errorMessage = message.headers[':error-message'];\n  var error = new Error(errorMessage.value || errorMessage);\n  error.code = error.name = errorCode.value || errorCode;\n  return error;\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  parseEvent: parseEvent\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}