{"ast":null,"code":"var Int64 = require('./int64').Int64;\nvar splitMessage = require('./split-message').splitMessage;\nvar BOOLEAN_TAG = 'boolean';\nvar BYTE_TAG = 'byte';\nvar SHORT_TAG = 'short';\nvar INT_TAG = 'integer';\nvar LONG_TAG = 'long';\nvar BINARY_TAG = 'binary';\nvar STRING_TAG = 'string';\nvar TIMESTAMP_TAG = 'timestamp';\nvar UUID_TAG = 'uuid';\n\n/**\n * @api private\n *\n * @param {Buffer} headers\n */\nfunction parseHeaders(headers) {\n  var out = {};\n  var position = 0;\n  while (position < headers.length) {\n    var nameLength = headers.readUInt8(position++);\n    var name = headers.slice(position, position + nameLength).toString();\n    position += nameLength;\n    switch (headers.readUInt8(position++)) {\n      case 0 /* boolTrue */:\n        out[name] = {\n          type: BOOLEAN_TAG,\n          value: true\n        };\n        break;\n      case 1 /* boolFalse */:\n        out[name] = {\n          type: BOOLEAN_TAG,\n          value: false\n        };\n        break;\n      case 2 /* byte */:\n        out[name] = {\n          type: BYTE_TAG,\n          value: headers.readInt8(position++)\n        };\n        break;\n      case 3 /* short */:\n        out[name] = {\n          type: SHORT_TAG,\n          value: headers.readInt16BE(position)\n        };\n        position += 2;\n        break;\n      case 4 /* integer */:\n        out[name] = {\n          type: INT_TAG,\n          value: headers.readInt32BE(position)\n        };\n        position += 4;\n        break;\n      case 5 /* long */:\n        out[name] = {\n          type: LONG_TAG,\n          value: new Int64(headers.slice(position, position + 8))\n        };\n        position += 8;\n        break;\n      case 6 /* byteArray */:\n        var binaryLength = headers.readUInt16BE(position);\n        position += 2;\n        out[name] = {\n          type: BINARY_TAG,\n          value: headers.slice(position, position + binaryLength)\n        };\n        position += binaryLength;\n        break;\n      case 7 /* string */:\n        var stringLength = headers.readUInt16BE(position);\n        position += 2;\n        out[name] = {\n          type: STRING_TAG,\n          value: headers.slice(position, position + stringLength).toString()\n        };\n        position += stringLength;\n        break;\n      case 8 /* timestamp */:\n        out[name] = {\n          type: TIMESTAMP_TAG,\n          value: new Date(new Int64(headers.slice(position, position + 8)).valueOf())\n        };\n        position += 8;\n        break;\n      case 9 /* uuid */:\n        var uuidChars = headers.slice(position, position + 16).toString('hex');\n        position += 16;\n        out[name] = {\n          type: UUID_TAG,\n          value: uuidChars.substr(0, 8) + '-' + uuidChars.substr(8, 4) + '-' + uuidChars.substr(12, 4) + '-' + uuidChars.substr(16, 4) + '-' + uuidChars.substr(20)\n        };\n        break;\n      default:\n        throw new Error('Unrecognized header type tag');\n    }\n  }\n  return out;\n}\nfunction parseMessage(message) {\n  var parsed = splitMessage(message);\n  return {\n    headers: parseHeaders(parsed.headers),\n    body: parsed.body\n  };\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  parseMessage: parseMessage\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}