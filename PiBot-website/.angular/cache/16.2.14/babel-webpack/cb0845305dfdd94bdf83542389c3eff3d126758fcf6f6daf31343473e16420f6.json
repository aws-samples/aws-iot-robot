{"ast":null,"code":"var Buffer = require('buffer/').Buffer;\nvar hashUtils = require('./browserHashUtils');\nvar BLOCK_SIZE = 64;\nvar DIGEST_LENGTH = 20;\nvar KEY = new Uint32Array([0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0]);\nvar INIT = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\nvar MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;\n\n/**\n * @api private\n */\nfunction Sha1() {\n  this.h0 = 0x67452301;\n  this.h1 = 0xEFCDAB89;\n  this.h2 = 0x98BADCFE;\n  this.h3 = 0x10325476;\n  this.h4 = 0xC3D2E1F0;\n  // The first 64 bytes (16 words) is the data chunk\n  this.block = new Uint32Array(80);\n  this.offset = 0;\n  this.shift = 24;\n  this.totalLength = 0;\n}\n\n/**\n * @api private\n */\nmodule.exports = exports = Sha1;\nSha1.BLOCK_SIZE = BLOCK_SIZE;\nSha1.prototype.update = function (data) {\n  if (this.finished) {\n    throw new Error('Attempted to update an already finished hash.');\n  }\n  if (hashUtils.isEmptyData(data)) {\n    return this;\n  }\n  data = hashUtils.convertToBuffer(data);\n  var length = data.length;\n  this.totalLength += length * 8;\n  for (var i = 0; i < length; i++) {\n    this.write(data[i]);\n  }\n  return this;\n};\nSha1.prototype.write = function write(byte) {\n  this.block[this.offset] |= (byte & 0xff) << this.shift;\n  if (this.shift) {\n    this.shift -= 8;\n  } else {\n    this.offset++;\n    this.shift = 24;\n  }\n  if (this.offset === 16) this.processBlock();\n};\nSha1.prototype.digest = function (encoding) {\n  // Pad\n  this.write(0x80);\n  if (this.offset > 14 || this.offset === 14 && this.shift < 24) {\n    this.processBlock();\n  }\n  this.offset = 14;\n  this.shift = 24;\n\n  // 64-bit length big-endian\n  this.write(0x00); // numbers this big aren't accurate in javascript anyway\n  this.write(0x00); // ..So just hard-code to zero.\n  this.write(this.totalLength > 0xffffffffff ? this.totalLength / 0x10000000000 : 0x00);\n  this.write(this.totalLength > 0xffffffff ? this.totalLength / 0x100000000 : 0x00);\n  for (var s = 24; s >= 0; s -= 8) {\n    this.write(this.totalLength >> s);\n  }\n  // The value in state is little-endian rather than big-endian, so flip\n  // each word into a new Uint8Array\n  var out = new Buffer(DIGEST_LENGTH);\n  var outView = new DataView(out.buffer);\n  outView.setUint32(0, this.h0, false);\n  outView.setUint32(4, this.h1, false);\n  outView.setUint32(8, this.h2, false);\n  outView.setUint32(12, this.h3, false);\n  outView.setUint32(16, this.h4, false);\n  return encoding ? out.toString(encoding) : out;\n};\nSha1.prototype.processBlock = function processBlock() {\n  // Extend the sixteen 32-bit words into eighty 32-bit words:\n  for (var i = 16; i < 80; i++) {\n    var w = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];\n    this.block[i] = w << 1 | w >>> 31;\n  }\n\n  // Initialize hash value for this chunk:\n  var a = this.h0;\n  var b = this.h1;\n  var c = this.h2;\n  var d = this.h3;\n  var e = this.h4;\n  var f, k;\n\n  // Main loop:\n  for (i = 0; i < 80; i++) {\n    if (i < 20) {\n      f = d ^ b & (c ^ d);\n      k = 0x5A827999;\n    } else if (i < 40) {\n      f = b ^ c ^ d;\n      k = 0x6ED9EBA1;\n    } else if (i < 60) {\n      f = b & c | d & (b | c);\n      k = 0x8F1BBCDC;\n    } else {\n      f = b ^ c ^ d;\n      k = 0xCA62C1D6;\n    }\n    var temp = (a << 5 | a >>> 27) + f + e + k + (this.block[i] | 0);\n    e = d;\n    d = c;\n    c = b << 30 | b >>> 2;\n    b = a;\n    a = temp;\n  }\n\n  // Add this chunk's hash to result so far:\n  this.h0 = this.h0 + a | 0;\n  this.h1 = this.h1 + b | 0;\n  this.h2 = this.h2 + c | 0;\n  this.h3 = this.h3 + d | 0;\n  this.h4 = this.h4 + e | 0;\n\n  // The block is now reusable.\n  this.offset = 0;\n  for (i = 0; i < 16; i++) {\n    this.block[i] = 0;\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}