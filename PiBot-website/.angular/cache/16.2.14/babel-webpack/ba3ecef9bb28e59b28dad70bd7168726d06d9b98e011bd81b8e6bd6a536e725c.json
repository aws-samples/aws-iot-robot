{"ast":null,"code":"var util = require('../core').util;\nvar convert = require('./converter');\nvar Translator = function (options) {\n  options = options || {};\n  this.attrValue = options.attrValue;\n  this.convertEmptyValues = Boolean(options.convertEmptyValues);\n  this.wrapNumbers = Boolean(options.wrapNumbers);\n};\nTranslator.prototype.translateInput = function (value, shape) {\n  this.mode = 'input';\n  return this.translate(value, shape);\n};\nTranslator.prototype.translateOutput = function (value, shape) {\n  this.mode = 'output';\n  return this.translate(value, shape);\n};\nTranslator.prototype.translate = function (value, shape) {\n  var self = this;\n  if (!shape || value === undefined) return undefined;\n  if (shape.shape === self.attrValue) {\n    return convert[self.mode](value, {\n      convertEmptyValues: self.convertEmptyValues,\n      wrapNumbers: self.wrapNumbers\n    });\n  }\n  switch (shape.type) {\n    case 'structure':\n      return self.translateStructure(value, shape);\n    case 'map':\n      return self.translateMap(value, shape);\n    case 'list':\n      return self.translateList(value, shape);\n    default:\n      return self.translateScalar(value, shape);\n  }\n};\nTranslator.prototype.translateStructure = function (structure, shape) {\n  var self = this;\n  if (structure == null) return undefined;\n  var struct = {};\n  util.each(structure, function (name, value) {\n    var memberShape = shape.members[name];\n    if (memberShape) {\n      var result = self.translate(value, memberShape);\n      if (result !== undefined) struct[name] = result;\n    }\n  });\n  return struct;\n};\nTranslator.prototype.translateList = function (list, shape) {\n  var self = this;\n  if (list == null) return undefined;\n  var out = [];\n  util.arrayEach(list, function (value) {\n    var result = self.translate(value, shape.member);\n    if (result === undefined) out.push(null);else out.push(result);\n  });\n  return out;\n};\nTranslator.prototype.translateMap = function (map, shape) {\n  var self = this;\n  if (map == null) return undefined;\n  var out = {};\n  util.each(map, function (key, value) {\n    var result = self.translate(value, shape.value);\n    if (result === undefined) out[key] = null;else out[key] = result;\n  });\n  return out;\n};\nTranslator.prototype.translateScalar = function (value, shape) {\n  return shape.toType(value);\n};\n\n/**\n * @api private\n */\nmodule.exports = Translator;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}