{"ast":null,"code":"import * as Paho from 'paho-mqtt';\nimport * as CryptoJS from 'crypto-js';\nimport * as awsConfig from './awsconfig';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let MqttService = /*#__PURE__*/(() => {\n  class MqttService {\n    constructor() {\n      this._mqttConnected = new Subject();\n      this._mqttMessages = new Subject();\n      this.mqttConnected$ = this._mqttConnected.asObservable();\n      this.mqttMessages$ = this._mqttMessages.asObservable();\n    }\n    // mqttservice commands\n    p4sign(key, msg) {\n      const hash = CryptoJS.HmacSHA256(msg, key);\n      return hash.toString(CryptoJS.enc.Hex);\n    }\n    p4sha256(msg) {\n      const hash = CryptoJS.SHA256(msg);\n      return hash.toString(CryptoJS.enc.Hex);\n    }\n    p4getSignatureKey(key, dateStamp, regionName, serviceName) {\n      const kDate = CryptoJS.HmacSHA256(dateStamp, 'AWS4' + key);\n      const kRegion = CryptoJS.HmacSHA256(regionName, kDate);\n      const kService = CryptoJS.HmacSHA256(serviceName, kRegion);\n      const kSigning = CryptoJS.HmacSHA256('aws4_request', kService);\n      return kSigning;\n    }\n    setThingName(name) {\n      this.thingName = name;\n      this.topics = [\"movement/\" + this.thingName, 'proximity/' + this.thingName, '$aws/events/presence/#'];\n    }\n    connect(accessKey, secretAccessKey, sessionToken) {\n      //init MQTT client\n      this._mqttConnected.next(false);\n      let clientId = Math.random().toString(36).substring(7);\n      let endpoint = this.getEndpoint(accessKey, secretAccessKey, sessionToken);\n      this.mqttClient = new Paho.Client(endpoint, clientId);\n      const connectOptions = {\n        useSSL: true,\n        timeout: 3,\n        mqttVersion: 4,\n        onSuccess: this.onConnect.bind(this),\n        onFailure: this.onFailConnect.bind(this)\n      };\n      this.mqttClient.connect(connectOptions);\n    }\n    getEndpoint(accessKey, secretAccessKey, sessionToken) {\n      const REGION = awsConfig.region;\n      const IOT_ENDPOINT = awsConfig.iotEndpoint;\n      const KEY_ID = accessKey;\n      const SECRET_KEY = secretAccessKey;\n      const SESSION_TOKEN = encodeURIComponent(sessionToken);\n      //date&time \n      const dt = new Date().toISOString().replace(/[^0-9]/g, \"\");\n      const ymd = dt.slice(0, 8);\n      const fdt = `${ymd}T${dt.slice(8, 14)}Z`;\n      const scope = `${ymd}/${REGION}/iotdevicegateway/aws4_request`;\n      const ks = encodeURIComponent(`${KEY_ID}/${scope}`);\n      let qs = `X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=${ks}&X-Amz-Date=${fdt}&X-Amz-SignedHeaders=host`;\n      const req = `GET\\n/mqtt\\n${qs}\\nhost:${IOT_ENDPOINT}\\n\\nhost\\n${this.p4sha256('')}`;\n      qs += '&X-Amz-Signature=' + this.p4sign(this.p4getSignatureKey(SECRET_KEY, ymd, REGION, 'iotdevicegateway'), `AWS4-HMAC-SHA256\\n${fdt}\\n${scope}\\n${this.p4sha256(req)}`);\n      qs += '&X-Amz-Security-Token=' + SESSION_TOKEN;\n      return `wss://${IOT_ENDPOINT}/mqtt?${qs}`;\n    }\n    onConnect() {\n      this._mqttConnected.next(true);\n      this.subscribeTopics();\n      console.log(\"MQTT client connected:\", this.mqttClient);\n      this.mqttClient.onMessageArrived = this.onNewMessage.bind(this);\n      this.mqttClient.onConnectionLost = function (e) {\n        console.log(e);\n      };\n    }\n    subscribeTopics() {\n      this.topics.forEach(topic => {\n        this.mqttClient.subscribe(topic);\n        console.log(\"Subscribed to MQTT topic: \", topic);\n      });\n    }\n    onNewMessage(message) {\n      let info = JSON.parse(message.payloadString);\n      this._mqttMessages.next(info);\n      //console.log(\"MQTT Service - message:\",info);\n    }\n\n    sendMessage(topic, payload) {\n      console.log(\"Sending MQTT message to topic \", topic);\n      this.mqttClient.publish(topic, payload = payload);\n    }\n    onFailConnect(err) {\n      console.log(\"MQTT connect failed:\", err);\n    }\n    static #_ = this.ɵfac = function MqttService_Factory(t) {\n      return new (t || MqttService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MqttService,\n      factory: MqttService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MqttService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}