{"ast":null,"code":"var util = require('../core').util;\nvar toBuffer = util.buffer.toBuffer;\n\n// All prelude components are unsigned, 32-bit integers\nvar PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nvar CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @api private\n *\n * @param {Buffer} message\n */\nfunction splitMessage(message) {\n  if (!util.Buffer.isBuffer(message)) message = toBuffer(message);\n  if (message.length < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error('Provided message too short to accommodate event stream message overhead');\n  }\n  if (message.length !== message.readUInt32BE(0)) {\n    throw new Error('Reported message length does not match received message length');\n  }\n  var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);\n  if (expectedPreludeChecksum !== util.crypto.crc32(message.slice(0, PRELUDE_LENGTH))) {\n    throw new Error('The prelude checksum specified in the message (' + expectedPreludeChecksum + ') does not match the calculated CRC32 checksum.');\n  }\n  var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);\n  if (expectedMessageChecksum !== util.crypto.crc32(message.slice(0, message.length - CHECKSUM_LENGTH))) {\n    throw new Error('The message checksum did not match the expected value of ' + expectedMessageChecksum);\n  }\n  var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;\n  var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);\n  return {\n    headers: message.slice(headersStart, headersEnd),\n    body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH)\n  };\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  splitMessage: splitMessage\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}