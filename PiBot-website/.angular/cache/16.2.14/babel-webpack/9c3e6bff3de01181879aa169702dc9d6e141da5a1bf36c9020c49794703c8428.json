{"ast":null,"code":"var util = require('../core').util;\nvar toBuffer = util.buffer.toBuffer;\n\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n * @param {Buffer} bytes\n *\n * @api private\n */\nfunction Int64(bytes) {\n  if (bytes.length !== 8) {\n    throw new Error('Int64 buffers must be exactly 8 bytes');\n  }\n  if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n  this.bytes = bytes;\n}\n\n/**\n * @param {number} number\n * @returns {Int64}\n *\n * @api private\n */\nInt64.fromNumber = function (number) {\n  if (number > 9223372036854775807 || number < -9223372036854775808) {\n    throw new Error(number + ' is too large (or, if negative, too small) to represent as an Int64');\n  }\n  var bytes = new Uint8Array(8);\n  for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n    bytes[i] = remaining;\n  }\n  if (number < 0) {\n    negate(bytes);\n  }\n  return new Int64(bytes);\n};\n\n/**\n * @returns {number}\n *\n * @api private\n */\nInt64.prototype.valueOf = function () {\n  var bytes = this.bytes.slice(0);\n  var negative = bytes[0] & 128;\n  if (negative) {\n    negate(bytes);\n  }\n  return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n};\nInt64.prototype.toString = function () {\n  return String(this.valueOf());\n};\n\n/**\n * @param {Buffer} bytes\n *\n * @api private\n */\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) {\n      break;\n    }\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  Int64: Int64\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}