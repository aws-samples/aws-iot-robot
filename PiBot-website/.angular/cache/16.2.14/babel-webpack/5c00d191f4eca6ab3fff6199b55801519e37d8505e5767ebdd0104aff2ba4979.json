{"ast":null,"code":"import _asyncToGenerator from \"/Users/gemmerto/local-dev/Git-Github/aws-samples/aws-iot-robot/PiBot-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as awsConfig from './awsconfig';\nimport * as AWS from 'aws-sdk';\nimport * as AmazonCognitoIdentity from 'amazon-cognito-identity-js';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    //idToken$ = this._idToken.asObservable();\n    //credentials$ = this._credentials.asObservable();\n    constructor(router) {\n      this.router = router;\n      this.self = this;\n      this._idToken = new Subject();\n      this._credentials = new Subject();\n      this.resetRequired = false;\n      this.returnToLogin = false;\n      AWS.config.region = awsConfig.region;\n    }\n    isAuthenticated() {\n      console.log(\"Checking if user is authenticated\");\n      if (!AWS.config.credentials) {\n        console.log(\"Not authenticated - no credentials set\");\n        return false;\n      } else {\n        if (AWS.config.credentials['expired']) {\n          console.log(\"Not authenticated - credentials expired\");\n          return false;\n        } else {\n          console.log(\"Authenticated\");\n          return true;\n        }\n      }\n    }\n    authUser(username, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let self = _this;\n        let authInfo = {\n          Username: username,\n          Password: password\n        };\n        _this.authData = new AmazonCognitoIdentity.AuthenticationDetails(authInfo);\n        let poolData = {\n          UserPoolId: awsConfig.cognitoUserPool,\n          ClientId: awsConfig.cognitoClientId,\n          TokenScopesArray: ['email', 'openid']\n        };\n        let userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n        let userData = {\n          Username: username,\n          Pool: userPool\n        };\n        _this._cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n        const promise = new Promise((resolve, reject) => {\n          var self = _this;\n          _this._cognitoUser.authenticateUser(_this.authData, {\n            onSuccess: function (result) {\n              console.log(\"Successfully authenticated using Cognito\");\n              //let accessToken = result.getAccessToken().getJwtToken();\n              let idToken = result.getIdToken().getJwtToken();\n              self._idToken.next(idToken);\n              let cogUri = 'cognito-idp.' + awsConfig.region + '.amazonaws.com/' + awsConfig.cognitoUserPool;\n              AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n                IdentityPoolId: awsConfig.cognitoIdPoolId,\n                Logins: {\n                  [cogUri]: idToken\n                }\n              });\n              AWS.config.credentials['refresh'](error => {\n                if (error) {\n                  console.log(\"Cred refresh error:\", error);\n                } else {\n                  console.log(\"Refresh successful\");\n                  console.log(\"AWS Creds from AUTH Service:\", AWS.config.credentials);\n                  self.attachPrincipalPolicy(awsConfig.cognitoIoTPolicy, AWS.config.credentials['identityId']);\n                  resolve(self._credentials);\n                }\n              });\n            },\n            onFailure: function (error) {\n              console.log(\"Failed to auth using Cognito\", error);\n              reject();\n            },\n            newPasswordRequired: function (userAttributes, requiredAttributes) {\n              console.log(\"Need to reset password\");\n              self.userAttribs = userAttributes;\n              self.resetRequired = true;\n            }\n          });\n        });\n        return promise;\n      })();\n    }\n    resetPassword(oldPw, newPw) {\n      var self = this;\n      console.log(\"Setting new password for:\", this._cognitoUser);\n      console.log(\"User attribs:\", this.userAttribs);\n      console.log(\"Auth Data:\", self.authData);\n      delete this.userAttribs.email;\n      delete this.userAttribs.email_verified;\n      delete this.userAttribs.phone_number_verified;\n      this.userAttribs.name = \"temp_name\";\n      this._cognitoUser.completeNewPasswordChallenge(newPw, this.userAttribs, {\n        onSuccess: function (result) {\n          console.log(\"Set new password\");\n          self.returnToLogin = true;\n        },\n        onFailure: function (err) {\n          console.log(\"Failed to set new password: \", err);\n        }\n      });\n    }\n    attachPrincipalPolicy(policyName, principal) {\n      console.log(\"Attaching IoT policy to principal\");\n      new AWS.Iot().attachPrincipalPolicy({\n        policyName: policyName,\n        principal: principal\n      }, function (err, data) {\n        if (err) {\n          console.error(err); // an error occurred\n        }\n      });\n    }\n\n    getPolicyPrincipals(policyName) {\n      let params = {\n        policyName: policyName\n      };\n      let pols = new AWS.Iot().listTargetsForPolicy(params, function (err, data) {\n        if (err) console.log(err, err.stack);else console.log(data);\n      });\n      return pols;\n    }\n    getCredentials() {\n      return AWS.config.credentials;\n    }\n    signOut() {\n      console.log(\"Signing out\");\n      this._cognitoUser.signOut();\n      this.router.navigate(['/login']);\n    }\n    returnToLoginPage() {\n      this.resetRequired = false;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}