{"ast":null,"code":"'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar gOPD = require('gopd');\n\n/** @type {(O: object) => string} */\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound('String.prototype.slice');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\n/** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n  for (var i = 0; i < array.length; i += 1) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/** @typedef {(receiver: import('.').TypedArray) => string | typeof Uint8Array.prototype.slice.call | typeof Uint8Array.prototype.set.call} Getter */\n/** @type {{ [k in `\\$${import('.').TypedArrayName}`]?: Getter } & { __proto__: null }} */\nvar cache = {\n  __proto__: null\n};\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    var arr = new g[typedArray]();\n    if (Symbol.toStringTag in arr) {\n      var proto = getPrototypeOf(arr);\n      // @ts-expect-error TS won't narrow inside a closure\n      var descriptor = gOPD(proto, Symbol.toStringTag);\n      if (!descriptor) {\n        var superProto = getPrototypeOf(proto);\n        // @ts-expect-error TS won't narrow inside a closure\n        descriptor = gOPD(superProto, Symbol.toStringTag);\n      }\n      // @ts-expect-error TODO: fix\n      cache['$' + typedArray] = callBind(descriptor.get);\n    }\n  });\n} else {\n  forEach(typedArrays, function (typedArray) {\n    var arr = new g[typedArray]();\n    var fn = arr.slice || arr.set;\n    if (fn) {\n      // @ts-expect-error TODO: fix\n      cache['$' + typedArray] = callBind(fn);\n    }\n  });\n}\n\n/** @type {(value: object) => false | import('.').TypedArrayName} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  /** @type {ReturnType<typeof tryAllTypedArrays>} */var found = false;\n  forEach(\n  // eslint-disable-next-line no-extra-parens\n  /** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */\n  cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */\n  function (getter, typedArray) {\n    if (!found) {\n      try {\n        // @ts-expect-error TODO: fix\n        if ('$' + getter(value) === typedArray) {\n          found = $slice(typedArray, 1);\n        }\n      } catch (e) {/**/}\n    }\n  });\n  return found;\n};\n\n/** @type {(value: object) => false | import('.').TypedArrayName} */\nvar trySlices = function tryAllSlices(value) {\n  /** @type {ReturnType<typeof tryAllSlices>} */var found = false;\n  forEach(\n  // eslint-disable-next-line no-extra-parens\n  /** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */\n  cache, /** @type {(getter: typeof cache, name: `\\$${import('.').TypedArrayName}`) => void} */function (getter, name) {\n    if (!found) {\n      try {\n        // @ts-expect-error TODO: fix\n        getter(value);\n        found = $slice(name, 1);\n      } catch (e) {/**/}\n    }\n  });\n  return found;\n};\n\n/** @type {import('.')} */\nmodule.exports = function whichTypedArray(value) {\n  if (!value || typeof value !== 'object') {\n    return false;\n  }\n  if (!hasToStringTag) {\n    /** @type {string} */\n    var tag = $slice($toString(value), 8, -1);\n    if ($indexOf(typedArrays, tag) > -1) {\n      return tag;\n    }\n    if (tag !== 'Object') {\n      return false;\n    }\n    // node < 0.6 hits here on real Typed Arrays\n    return trySlices(value);\n  }\n  if (!gOPD) {\n    return null;\n  } // unknown engine\n  return tryTypedArrays(value);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}