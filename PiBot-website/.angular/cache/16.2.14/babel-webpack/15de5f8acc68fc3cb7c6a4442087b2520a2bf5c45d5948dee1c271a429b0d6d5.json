{"ast":null,"code":"import { DashboardComponent } from '../dashboard/dashboard.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"mapcanvas\"];\nfunction MapComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 9)(1, \"span\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Obstacle Detected: \", ctx_r0.proximity, \" cm\");\n  }\n}\nfunction MapComponent_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 11)(1, \"span\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Obstacle Detected: \", ctx_r1.proximity, \" cm\");\n  }\n}\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent extends DashboardComponent {\n    constructor() {\n      super(...arguments);\n      this.curPosX = 300; //start position\n      this.curPosY = 250; // start position\n      this.robotDegrees = 0; //degrees\n      this.degreesStep = 5; // number of degrees to change on move left or right\n      this.pixelsToMove = 5; // how many pixels to move on map\n      this.turningPixels = 2;\n      this.mqttCommands = [];\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      this.ctx = this.mapCanvas.nativeElement.getContext('2d');\n      this.ctx.beginPath();\n      this.ctx.lineWidth = 5;\n      this.ctx.strokeStyle = \"#FF0000\";\n      this.awsCredentials = this.authService.getCredentials();\n      this.moveIntervals = [];\n      this.mqttMessages = this.mqttService.mqttMessages$.subscribe(mqttMessages => this.processMqttMessage(mqttMessages));\n    }\n    connect(awsCredentials) {\n      this.mqttService.connect(awsCredentials['accessKeyId'], awsCredentials['secretAccessKey'], awsCredentials['sessionToken']);\n    }\n    calcMovement(pixels) {\n      // calculate new X and Y for line move to\n      // first get delta and then add to existing (ydelta = hypotenuse * sin(angle), xdelta = hypotenuse * cos(angle))\n      // convert degrees to radians for sin/cos commands\n      const PI = Math.PI;\n      let xDelta = pixels * Math.sin(PI / 180 * this.robotDegrees);\n      //console.log(\"xDelta:\",xDelta);\n      let yDelta = pixels * Math.cos(PI / 180 * this.robotDegrees);\n      //console.log(\"yDelta:\",yDelta);\n      //console.log(\"New X and Y:\",this.curPosX+xDelta,this.curPosY+yDelta);\n      return [this.curPosX + xDelta, this.curPosY + yDelta];\n    }\n    moveRobotOnMap(dir) {\n      let newPos = this.calcMovement(dir);\n      console.log(\"Moving robot on map:\", newPos);\n      // Draw new line and update reference position\n      this.ctx.moveTo(this.curPosX, this.curPosY);\n      this.ctx.lineTo(newPos[0], newPos[1]);\n      this.ctx.stroke();\n      this.curPosX = newPos[0];\n      this.curPosY = newPos[1];\n    }\n    setRobotDirection(dir) {\n      console.log(\"Setting robot orientation\");\n      if (dir == 'R') {\n        // -ve degree movement\n        this.robotDegrees > this.degreesStep ? this.robotDegrees -= this.degreesStep : this.robotDegrees = 359;\n      } else if (dir == 'L') {\n        // +ve degree movement\n        this.robotDegrees < 359 - this.degreesStep ? this.robotDegrees += this.degreesStep : this.robotDegrees = 0;\n      }\n    }\n    processMqttMessage(message) {\n      console.log(\"received mqtt message:\", message);\n      try {\n        if ('direction' in message) {\n          if (message['direction']['move_x'] != \"S\" || message['direction']['move_y'] != \"S\") {\n            if (message['direction']['move_y'] == 'L' || message['direction']['move_y'] == 'R') {\n              let newInt = setInterval(this.setRobotDirection.bind(this), 2000, message['direction']['move_y']);\n              this.moveIntervals.push(newInt);\n            }\n            if (message['direction']['move_x'] != \"S\") {\n              var dir;\n              message['direction']['move_x'] == \"F\" ? dir = this.pixelsToMove : dir = -this.pixelsToMove;\n              let newInt = setInterval(this.moveRobotOnMap.bind(this), 2000, dir);\n              this.moveIntervals.push(newInt);\n            }\n          } else {\n            //clear all intervals\n            console.log(\"Clearing all intervals\");\n            for (var id of this.moveIntervals) {\n              clearInterval(id);\n            }\n          }\n        } else if ('distance' in message) {\n          this.proximity = message['distance'];\n        }\n      } catch {\n        console.log(\"process mqtt error\");\n      }\n    }\n    calibrate(event) {}\n    static #_ = this.ɵfac = /*@__PURE__*/function () {\n      let ɵMapComponent_BaseFactory;\n      return function MapComponent_Factory(t) {\n        return (ɵMapComponent_BaseFactory || (ɵMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(MapComponent)))(t || MapComponent);\n      };\n    }();\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      viewQuery: function MapComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapCanvas = _t.first);\n        }\n      },\n      features: [i0.ɵɵInheritDefinitionFeature],\n      decls: 12,\n      vars: 2,\n      consts: [[1, \"card\", \"shadow\", \"mb-4\", \"d-flex\", \"align-items-stretch\"], [1, \"card-header\", \"text-white\", \"bg-secondary\"], [1, \"row\"], [1, \"col\"], [\"class\", \"btn btn-sm btn-success\", 4, \"ngIf\"], [\"class\", \"btn btn-sm btn-danger\", 4, \"ngIf\"], [1, \"card-body\"], [\"id\", \"mapcanvas\", \"width\", \"600\", \"height\", \"500\"], [\"mapcanvas\", \"\"], [1, \"btn\", \"btn-sm\", \"btn-success\"], [1, \"badge\", \"badge-success\", \"p-1\", \"align-right\"], [1, \"btn\", \"btn-sm\", \"btn-danger\"], [1, \"badge\", \"badge-danger\", \"p-1\", \"align-right\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h4\");\n          i0.ɵɵtext(5, \"Journey\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 3);\n          i0.ɵɵtemplate(7, MapComponent_button_7_Template, 3, 1, \"button\", 4);\n          i0.ɵɵtemplate(8, MapComponent_button_8_Template, 3, 1, \"button\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 6);\n          i0.ɵɵelement(10, \"canvas\", 7, 8);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", !ctx.mqttConnected && ctx.proximity > 20);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.mqttConnected && ctx.proximity <= 20);\n        }\n      },\n      dependencies: [i1.NgIf]\n    });\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}