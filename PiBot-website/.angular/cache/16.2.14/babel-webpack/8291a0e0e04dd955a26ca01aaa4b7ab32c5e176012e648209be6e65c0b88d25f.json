{"ast":null,"code":"var util = require('./util');\nvar regionConfig = require('./region_config_data.json');\nfunction generateRegionPrefix(region) {\n  if (!region) return null;\n  var parts = region.split('-');\n  if (parts.length < 3) return null;\n  return parts.slice(0, parts.length - 2).join('-') + '-*';\n}\nfunction derivedKeys(service) {\n  var region = service.config.region;\n  var regionPrefix = generateRegionPrefix(region);\n  var endpointPrefix = service.api.endpointPrefix;\n  return [[region, endpointPrefix], [regionPrefix, endpointPrefix], [region, '*'], [regionPrefix, '*'], ['*', endpointPrefix], [region, 'internal-*'], ['*', '*']].map(function (item) {\n    return item[0] && item[1] ? item.join('/') : null;\n  });\n}\nfunction applyConfig(service, config) {\n  util.each(config, function (key, value) {\n    if (key === 'globalEndpoint') return;\n    if (service.config[key] === undefined || service.config[key] === null) {\n      service.config[key] = value;\n    }\n  });\n}\nfunction configureEndpoint(service) {\n  var keys = derivedKeys(service);\n  var useFipsEndpoint = service.config.useFipsEndpoint;\n  var useDualstackEndpoint = service.config.useDualstackEndpoint;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!key) continue;\n    var rules = useFipsEndpoint ? useDualstackEndpoint ? regionConfig.dualstackFipsRules : regionConfig.fipsRules : useDualstackEndpoint ? regionConfig.dualstackRules : regionConfig.rules;\n    if (Object.prototype.hasOwnProperty.call(rules, key)) {\n      var config = rules[key];\n      if (typeof config === 'string') {\n        config = regionConfig.patterns[config];\n      }\n\n      // set global endpoint\n      service.isGlobalEndpoint = !!config.globalEndpoint;\n      if (config.signingRegion) {\n        service.signingRegion = config.signingRegion;\n      }\n\n      // signature version\n      if (!config.signatureVersion) {\n        // Note: config is a global object and should not be mutated here.\n        // However, we are retaining this line for backwards compatibility.\n        // The non-v4 signatureVersion will be set in a copied object below.\n        config.signatureVersion = 'v4';\n      }\n      var useBearer = (service.api && service.api.signatureVersion) === 'bearer';\n\n      // merge config\n      applyConfig(service, Object.assign({}, config, {\n        signatureVersion: useBearer ? 'bearer' : config.signatureVersion\n      }));\n      return;\n    }\n  }\n}\nfunction getEndpointSuffix(region) {\n  var regionRegexes = {\n    '^(us|eu|ap|sa|ca|me)\\\\-\\\\w+\\\\-\\\\d+$': 'amazonaws.com',\n    '^cn\\\\-\\\\w+\\\\-\\\\d+$': 'amazonaws.com.cn',\n    '^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$': 'amazonaws.com',\n    '^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$': 'c2s.ic.gov',\n    '^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$': 'sc2s.sgov.gov'\n  };\n  var defaultSuffix = 'amazonaws.com';\n  var regexes = Object.keys(regionRegexes);\n  for (var i = 0; i < regexes.length; i++) {\n    var regionPattern = RegExp(regexes[i]);\n    var dnsSuffix = regionRegexes[regexes[i]];\n    if (regionPattern.test(region)) return dnsSuffix;\n  }\n  return defaultSuffix;\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  configureEndpoint: configureEndpoint,\n  getEndpointSuffix: getEndpointSuffix\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}