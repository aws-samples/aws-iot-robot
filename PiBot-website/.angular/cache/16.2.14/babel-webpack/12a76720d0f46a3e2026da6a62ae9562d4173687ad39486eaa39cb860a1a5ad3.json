{"ast":null,"code":"/*!\n * JavaScript Cookie v2.2.1\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;\n(function (factory) {\n  var registeredInModuleLoader;\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n    registeredInModuleLoader = true;\n  }\n  if (typeof exports === 'object') {\n    module.exports = factory();\n    registeredInModuleLoader = true;\n  }\n  if (!registeredInModuleLoader) {\n    var OldCookies = window.Cookies;\n    var api = window.Cookies = factory();\n    api.noConflict = function () {\n      window.Cookies = OldCookies;\n      return api;\n    };\n  }\n})(function () {\n  function extend() {\n    var i = 0;\n    var result = {};\n    for (; i < arguments.length; i++) {\n      var attributes = arguments[i];\n      for (var key in attributes) {\n        result[key] = attributes[key];\n      }\n    }\n    return result;\n  }\n  function decode(s) {\n    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n  }\n  function init(converter) {\n    function api() {}\n    function set(key, value, attributes) {\n      if (typeof document === 'undefined') {\n        return;\n      }\n      attributes = extend({\n        path: '/'\n      }, api.defaults, attributes);\n      if (typeof attributes.expires === 'number') {\n        attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);\n      }\n\n      // We're using \"expires\" because \"max-age\" is not supported by IE\n      attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n      try {\n        var result = JSON.stringify(value);\n        if (/^[\\{\\[]/.test(result)) {\n          value = result;\n        }\n      } catch (e) {}\n      value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n      key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\\(\\)]/g, escape);\n      var stringifiedAttributes = '';\n      for (var attributeName in attributes) {\n        if (!attributes[attributeName]) {\n          continue;\n        }\n        stringifiedAttributes += '; ' + attributeName;\n        if (attributes[attributeName] === true) {\n          continue;\n        }\n\n        // Considers RFC 6265 section 5.2:\n        // ...\n        // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n        //     character:\n        // Consume the characters of the unparsed-attributes up to,\n        // not including, the first %x3B (\";\") character.\n        // ...\n        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n      }\n      return document.cookie = key + '=' + value + stringifiedAttributes;\n    }\n    function get(key, json) {\n      if (typeof document === 'undefined') {\n        return;\n      }\n      var jar = {};\n      // To prevent the for loop in the first place assign an empty array\n      // in case there are no cookies at all.\n      var cookies = document.cookie ? document.cookie.split('; ') : [];\n      var i = 0;\n      for (; i < cookies.length; i++) {\n        var parts = cookies[i].split('=');\n        var cookie = parts.slice(1).join('=');\n        if (!json && cookie.charAt(0) === '\"') {\n          cookie = cookie.slice(1, -1);\n        }\n        try {\n          var name = decode(parts[0]);\n          cookie = (converter.read || converter)(cookie, name) || decode(cookie);\n          if (json) {\n            try {\n              cookie = JSON.parse(cookie);\n            } catch (e) {}\n          }\n          jar[name] = cookie;\n          if (key === name) {\n            break;\n          }\n        } catch (e) {}\n      }\n      return key ? jar[key] : jar;\n    }\n    api.set = set;\n    api.get = function (key) {\n      return get(key, false /* read as raw */);\n    };\n\n    api.getJSON = function (key) {\n      return get(key, true /* read as json */);\n    };\n\n    api.remove = function (key, attributes) {\n      set(key, '', extend(attributes, {\n        expires: -1\n      }));\n    };\n    api.defaults = {};\n    api.withConverter = init;\n    return api;\n  }\n  return init(function () {});\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}