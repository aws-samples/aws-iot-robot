{"ast":null,"code":"import _asyncToGenerator from \"/Users/gemmerto/local-dev/Git-Github/aws-samples/aws-iot-robot/PiBot-website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as AWS from 'aws-sdk';\nimport { SignalingClient } from 'amazon-kinesis-video-streams-webrtc';\nimport { Role } from '../../role';\nimport * as awsConfig from '../awsconfig';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../mqtt.service\";\nimport * as i2 from \"../auth.service\";\nfunction DashboardComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 47);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const thingName_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", thingName_r15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(thingName_r15);\n  }\n}\nfunction DashboardComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 48)(1, \"span\", 49);\n    i0.ɵɵtext(2, \"Remote Connected\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_button_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 50)(1, \"span\", 51);\n    i0.ɵɵtext(2, \"Remote Not Connected\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 48)(1, \"span\", 49);\n    i0.ɵɵtext(2, \"Robot Connected\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 50)(1, \"span\", 51);\n    i0.ɵɵtext(2, \"Robot Not Connected\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_button_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 48)(1, \"span\", 49);\n    i0.ɵɵtext(2, \"MQTT Connected\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent_button_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 50)(1, \"span\", 51);\n    i0.ɵɵtext(2, \"MQTT Not Connected\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DashboardComponent__svg_g_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"rect\", 52);\n    i0.ɵɵelementStart(2, \"text\", 53);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const box_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", box_r16.Left)(\"y\", box_r16.Top)(\"height\", box_r16.Height)(\"width\", box_r16.Width);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", box_r16.Left)(\"y\", box_r16.Top - 10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", box_r16.Name, \" \");\n  }\n}\nfunction DashboardComponent_button_39_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 54);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_button_39_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.startViewer(false, true, false, false));\n    });\n    i0.ɵɵtext(1, \"Connect to WebRTC Stream\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_button_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_button_40_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.stopViewer());\n    });\n    i0.ɵɵtext(1, \"Disconnect WebRTC Stream\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_button_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 54);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_button_41_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.startDetection());\n    });\n    i0.ɵɵtext(1, \"Start Detection\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_button_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_button_42_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.stopDetection());\n    });\n    i0.ɵɵtext(1, \"Stop Detection\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_button_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 56);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const label_r25 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(label_r25);\n  }\n}\nfunction DashboardComponent_button_80_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const label_r26 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(label_r26);\n  }\n}\nfunction DashboardComponent_button_92_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 56);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const label_r27 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", label_r27.name, \" : \", label_r27.confidence, \"%\");\n  }\n}\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(mqttService, authService) {\n      this.mqttService = mqttService;\n      this.authService = authService;\n      this.title = 'PiBot-website';\n      this.viewer = {};\n      this.natTraversalDisabled = false;\n      this.forceTURN = false;\n      this.clientId = \"VIEWER\";\n      this.widescreen = false;\n      this.openDataChannel = false;\n      this.sendVideo = false;\n      this.sendAudio = false;\n      this.useTrickleICE = true;\n      this.coreItems = [];\n      this.devicesConnected = {};\n      this.confidence = 50;\n    }\n    ngOnInit() {\n      this.mqttConnection = this.mqttService.mqttConnected$.subscribe(mqttConnected => this.mqttConnected = mqttConnected);\n      this.mqttMessages = this.mqttService.mqttMessages$.subscribe(mqttMessages => this.processMqttMessage(mqttMessages));\n      this.awsCredentials = this.authService.getCredentials();\n      // Video and Rekognition\n      this.rekog = new AWS.Rekognition();\n      this.canvas = document.getElementById('canvas');\n      this.video = document.getElementById('remoteview');\n      this.videoRef = this.video.getBoundingClientRect();\n      console.log(\"Video Ref:\", this.videoRef);\n      this.detect = \"no\";\n      this.stream = \"no\";\n      this.detectedLabels = [];\n      this.findLabels = [];\n      this.foundLabels = [];\n      this.availableThings = [];\n      this.thingName = \"Not Set\";\n      this.getThings();\n    }\n    initMqtt() {\n      this.mqttService.connect(this.awsCredentials['accessKeyId'], this.awsCredentials['secretAccessKey'], this.awsCredentials['sessionToken']);\n    }\n    setThingName() {\n      this.mqttService.setThingName(this.thingName);\n      this.initMqtt();\n    }\n    processMqttMessage(message) {\n      try {\n        if ('clientId' in message) {\n          this.devicesConnected[message.clientId] = message.eventType;\n          console.log(message);\n        }\n      } catch {\n        console.log(\"process mqtt error\");\n      }\n    }\n    startViewer(localView, remoteView, onStatsReport, onRemoteDataMessage) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.viewer['remoteView'] = remoteView;\n        _this.stream = \"yes\";\n        //console.log(\"Kinesis creds:\", this.awsCredentials);\n        // Create KVS client\n        const kinesisVideoClient = new AWS.KinesisVideo({\n          region: awsConfig.region,\n          accessKeyId: _this.awsCredentials['accessKeyId'],\n          secretAccessKey: _this.awsCredentials['secretAccessKey'],\n          sessionToken: _this.awsCredentials['sessionToken'],\n          correctClockSkew: true\n        });\n        // Get signaling channel ARN\n        const describeSignalingChannelResponse = yield kinesisVideoClient.describeSignalingChannel({\n          ChannelName: _this.thingName\n        }).promise();\n        const channelARN = describeSignalingChannelResponse.ChannelInfo.ChannelARN;\n        console.log('[VIEWER] Channel ARN: ', channelARN);\n        // Get signaling channel endpoints\n        const getSignalingChannelEndpointResponse = yield kinesisVideoClient.getSignalingChannelEndpoint({\n          ChannelARN: channelARN,\n          SingleMasterChannelEndpointConfiguration: {\n            Protocols: ['WSS', 'HTTPS'],\n            Role: \"VIEWER\"\n          }\n        }).promise();\n        const endpointsByProtocol = getSignalingChannelEndpointResponse.ResourceEndpointList.reduce((endpoints, endpoint) => {\n          endpoints[endpoint.Protocol] = endpoint.ResourceEndpoint;\n          return endpoints;\n        }, {});\n        console.log('[VIEWER] Endpoints: ', endpointsByProtocol);\n        const kinesisVideoSignalingChannelsClient = new AWS.KinesisVideoSignalingChannels({\n          region: awsConfig.region,\n          accessKeyId: _this.awsCredentials['accessKeyId'],\n          secretAccessKey: _this.awsCredentials['secretAccessKey'],\n          sessionToken: _this.awsCredentials['sessionToken'],\n          endpoint: endpointsByProtocol['HTTPS'],\n          correctClockSkew: true\n        });\n        // Get ICE server configuration\n        const getIceServerConfigResponse = yield kinesisVideoSignalingChannelsClient.getIceServerConfig({\n          ChannelARN: channelARN\n        }).promise();\n        const iceServers = [];\n        if (!_this.natTraversalDisabled && !_this.forceTURN) {\n          iceServers.push({\n            urls: `stun:stun.kinesisvideo.${awsConfig.region}.amazonaws.com:443`\n          });\n        }\n        if (!_this.natTraversalDisabled) {\n          getIceServerConfigResponse.IceServerList.forEach(iceServer => iceServers.push({\n            urls: iceServer.Uris,\n            username: iceServer.Username,\n            credential: iceServer.Password\n          }));\n        }\n        console.log('[VIEWER] ICE servers: ', iceServers);\n        console.log(\"Config:\", getSignalingChannelEndpointResponse);\n        // Create Signaling Client\n        _this.viewer['signalingClient'] = new SignalingClient({\n          channelARN,\n          channelEndpoint: endpointsByProtocol['WSS'],\n          //clientId: this.viewer['connection_id'],\n          clientId: _this.clientId,\n          role: Role.VIEWER,\n          region: awsConfig.region,\n          credentials: {\n            accessKeyId: _this.awsCredentials['accessKeyId'],\n            secretAccessKey: _this.awsCredentials['secretAccessKey'],\n            sessionToken: _this.awsCredentials['sessionToken']\n          },\n          systemClockOffset: kinesisVideoClient.config.systemClockOffset\n        });\n        const resolution = _this.widescreen ? {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          }\n        } : {\n          width: {\n            ideal: 640\n          },\n          height: {\n            ideal: 480\n          }\n        };\n        const constraints = {\n          video: _this.sendVideo ? resolution : false,\n          audio: _this.sendAudio\n        };\n        const configuration = {\n          iceServers\n          //iceTransportPolicy: this.forceTURN ? 'relay' : 'all'\n        };\n\n        _this.viewer['peerConnection'] = new RTCPeerConnection(configuration);\n        if (_this.openDataChannel) {\n          _this.viewer['dataChannel'] = _this.viewer['peerConnection'].createDataChannel('kvsDataChannel');\n          _this.viewer['peerConnection'].ondatachannel = event => {\n            event.channel.onmessage = onRemoteDataMessage;\n          };\n        }\n        // Poll for connection stats\n        _this.viewer['peerConnectionStatsInterval'] = setInterval(() => _this.viewer['peerConnection'].getStats().then(onStatsReport), 1000);\n        _this.viewer['signalingClient'].on('open', /*#__PURE__*/_asyncToGenerator(function* () {\n          console.log('[VIEWER] Connected to signaling service');\n          // Get a stream from the webcam, add it to the peer connection, and display it in the local view.\n          // If no video/audio needed, no need to request for the sources. \n          // Otherwise, the browser will throw an error saying that either video or audio has to be enabled.\n          if (_this.sendVideo || _this.sendAudio) {\n            try {\n              _this.viewer['localStream'] = yield navigator.mediaDevices.getUserMedia(constraints);\n              _this.viewer['localStream'].getTracks().forEach(track => _this.viewer['peerConnection'].addTrack(track, _this.viewer['localStream']));\n              localView.srcObject = _this.viewer['localStream'];\n            } catch (e) {\n              console.error('[VIEWER] Could not find webcam');\n              return;\n            }\n          }\n          // Create an SDP offer to send to the master\n          console.log('[VIEWER] Creating SDP offer');\n          yield _this.viewer['peerConnection'].setLocalDescription(yield _this.viewer['peerConnection'].createOffer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n          }));\n          // When trickle ICE is enabled, send the offer now and then send ICE candidates as they are generated. Otherwise wait on the ICE candidates.\n          if (_this.useTrickleICE) {\n            console.log('[VIEWER] Sending SDP offer');\n            _this.viewer['signalingClient'].sendSdpOffer(_this.viewer['peerConnection']['localDescription']);\n          }\n          console.log('[VIEWER] Generating ICE candidates');\n        }));\n        _this.viewer['signalingClient'].on('sdpAnswer', /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (answer) {\n            // Add the SDP answer to the peer connection\n            console.log('[VIEWER] Received SDP answer');\n            yield _this.viewer['peerConnection'].setRemoteDescription(answer);\n          });\n          return function (_x) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n        _this.viewer['signalingClient'].on('iceCandidate', candidate => {\n          // Add the ICE candidate received from the MASTER to the peer connection\n          console.log('[VIEWER] Received ICE candidate');\n          _this.viewer['peerConnection'].addIceCandidate(candidate);\n        });\n        _this.viewer['signalingClient'].on('close', () => {\n          console.log('[VIEWER] Disconnected from signaling channel');\n        });\n        _this.viewer['signalingClient'].on('error', error => {\n          console.error('[VIEWER] Signaling client error: ', error);\n        });\n        // Send any ICE candidates to the other peer\n        _this.viewer['peerConnection'].addEventListener('icecandidate', ({\n          candidate\n        }) => {\n          if (candidate) {\n            //console.log('[VIEWER] Generated ICE candidate');\n            // When trickle ICE is enabled, send the ICE candidates as they are generated.\n            if (_this.useTrickleICE) {\n              //console.log('[VIEWER] Sending ICE candidate');\n              _this.viewer['signalingClient'].sendIceCandidate(candidate);\n            }\n          } else {\n            console.log('[VIEWER] All ICE candidates have been generated');\n            // When trickle ICE is disabled, send the offer now that all the ICE candidates have ben generated.\n            if (!_this.useTrickleICE) {\n              console.log('[VIEWER] Sending SDP offer');\n              _this.viewer['signalingClient'].sendSdpOffer(_this.viewer['peerConnection']['localDescription']);\n            }\n          }\n        });\n        // As remote tracks are received, add them to the remote view\n        remoteView = document.getElementById('remoteview');\n        _this.viewer['peerConnection'].addEventListener('track', event => {\n          console.log('[VIEWER] Received remote track');\n          if (remoteView['srcObject']) {\n            return;\n          }\n          _this.viewer['remoteStream'] = event.streams[0];\n          remoteView['srcObject'] = _this.viewer['remoteStream'];\n        });\n        console.log('[VIEWER] Starting viewer connection');\n        _this.viewer['signalingClient'].open();\n      })();\n    }\n    stopViewer() {\n      console.log('[VIEWER] Stopping viewer connection');\n      this.stream = \"no\";\n      if (this.viewer['signalingClient']) {\n        this.viewer['signalingClient'].close();\n        this.viewer['signalingClient'] = null;\n      }\n      if (this.viewer['peerConnection']) {\n        this.viewer['peerConnection'].close();\n        this.viewer['peerConnection'] = null;\n      }\n      if (this.viewer['localStream']) {\n        this.viewer['localStream'].getTracks().forEach(track => track.stop());\n        this.viewer['localStream'] = null;\n      }\n      if (this.viewer['remoteStream']) {\n        this.viewer['remoteStream'].getTracks().forEach(track => track.stop());\n        this.viewer['remoteStream'] = null;\n      }\n      if (this.viewer['peerConnectionStatsInterval']) {\n        clearInterval(this.viewer['peerConnectionStatsInterval']);\n        this.viewer['peerConnectionStatsInterval'] = null;\n      }\n      if (this.viewer['localView']) {\n        this.viewer['localView']['srcObject'] = null;\n      }\n      if (this.viewer['remoteView']) {\n        this.viewer['remoteView']['srcObject'] = null;\n      }\n      if (this.viewer['dataChannel']) {\n        this.viewer['dataChannel'] = null;\n      }\n    }\n    sendViewerMessage(message) {\n      if (this.viewer['dataChannel']) {\n        try {\n          this.viewer['dataChannel'].send(message);\n        } catch (e) {\n          console.error('[VIEWER] Send DataChannel: ', e.toString());\n        }\n      }\n    }\n    getThings() {\n      var self = this;\n      let params = {};\n      new AWS.Iot().listThings(params, (err, data) => {\n        if (err) {\n          console.log(\"unable to retrieve available thing names\");\n        } else {\n          data['things'].forEach(thing => {\n            self.availableThings.push(thing.thingName);\n          });\n        }\n      });\n    }\n    getIoTEndpoint() {\n      var self = this;\n      let params = {\n        endpointType: 'iot:Data-ATS'\n      };\n      new AWS.Iot().describeEndpoint(params, function (err, data) {\n        if (err) {\n          console.log(\"Error getting IoT Endpoint address\");\n        } else {\n          console.log(\"Got endpoint address:\", data.endpointAddress);\n          self.iotEndpointAddress = data.endpointAddress;\n        }\n      });\n    }\n    initIoTClient() {\n      let creds = this.authService.getCredentials();\n      console.log(\"Initiate IoT Client connection for shadow update:\", creds);\n      this.iotClient = new AWS.IotData({\n        endpoint: awsConfig.iotEndpoint,\n        region: awsConfig.region,\n        credentials: creds\n      });\n    }\n    startDetection() {\n      let self = this;\n      this.detect = \"yes\";\n      this.timeoutId = setInterval(function () {\n        self.detectLabels();\n        self.findMatches();\n      }, 2000);\n    }\n    stopDetection() {\n      this.detect = \"no\";\n      clearInterval(this.timeoutId);\n      this.boundingBoxes = [];\n    }\n    detectLabels() {\n      let stream = this.viewer['remoteStream'];\n      if (stream) {\n        //console.log(\"Stream:\",stream);\n        let context = this.canvas.getContext('2d');\n        context.drawImage(this.video, 0, 0, 640, 480);\n        let dataUri = this.canvas.toDataURL('image/jpg'),\n          bin = atob(dataUri.split(',')[1]),\n          tempArr = [];\n        for (let i = 0; i < bin.length; i++) {\n          tempArr.push(bin.charCodeAt(i));\n        }\n        let imageBlob = new Uint8Array(tempArr);\n        this.getLabels(imageBlob);\n      } else {\n        console.log(\"No stream\");\n      }\n    }\n    getLabels(imageBlob) {\n      let self = this;\n      let params = {\n        Image: {\n          Bytes: imageBlob\n        },\n        MaxLabels: 10,\n        MinConfidence: this.confidence\n      };\n      this.rekog.detectLabels(params, function (err, data) {\n        if (err) {\n          console.log(err, err.stack);\n        } else {\n          self.drawBoundingBoxes(data.Labels);\n        }\n      });\n    }\n    drawBoundingBoxes(labels) {\n      this.boundingBoxes = [];\n      for (let i = 0; i < labels.length; i++) {\n        let instances = labels[i].Instances.length;\n        if (instances > 0) {\n          for (let j = 0; j < instances; j++) {\n            //console.log(\"Raw BBox:\",labels[i]);\n            let bBox = {\n              Name: labels[i].Name,\n              Width: labels[i].Instances[j].BoundingBox.Width * this.videoRef.width,\n              Height: labels[i].Instances[j].BoundingBox.Height * (this.videoRef.height - 100),\n              Left: labels[i].Instances[j].BoundingBox.Left * this.videoRef.width,\n              Top: labels[i].Instances[j].BoundingBox.Top * this.videoRef.height + 30\n            };\n            //console.log(\"Full Bounding box:\",bBox);\n            this.boundingBoxes.push(bBox);\n            if (!this.detectedLabels.some(label => label.name === labels[i].Name)) {\n              this.detectedLabels.push({\n                \"name\": labels[i].Name,\n                \"confidence\": labels[i].Confidence.toFixed(0)\n              });\n            }\n          }\n        }\n      }\n    }\n    addFindItem(item) {\n      console.log(\"Adding item to find:\", item);\n      this.findLabels.push(item);\n      this.findLabel = \"\";\n    }\n    findMatches() {\n      this.findLabels.forEach(findlabel => {\n        if (this.detectedLabels.some(label => label.name.toLowerCase() === findlabel.toLowerCase())) {\n          console.log(\"Match:\", findlabel);\n          this.findLabels.splice(this.findLabels.indexOf(findlabel), 1);\n          this.foundLabels.push(findlabel);\n        }\n      });\n    }\n    logout() {\n      this.authService.signOut();\n    }\n    static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.MqttService), i0.ɵɵdirectiveInject(i2.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 94,\n      vars: 24,\n      consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-dark\", \"bg-dark\"], [1, \"container-fluid\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#navbarSupportedContent\", \"aria-controls\", \"navbarSupportedContent\", \"aria-expanded\", \"false\", \"aria-label\", \"Toggle navigation\", 1, \"navbar-toggler\"], [1, \"navbar-toggler-icon\"], [\"href\", \"#\", 1, \"navbar-brand\"], [\"id\", \"navbarSupportedContent\", 1, \"collapse\", \"navbar-collapse\"], [1, \"d-flex\"], [\"placeholder\", \"PiBot IoT Thing Name\", \"aria-label\", \"PiBot IoT Thing Name\", 1, \"form-control\", \"me-2\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"class\", \"p-2\", 3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"nav\", \"navbar-nav\", \"ms-auto\"], [1, \"nav-item\", \"mr-1\"], [1, \"navbar-text\"], [1, \"nav-item\", \"m-1\"], [\"class\", \"btn btn-sm btn-success mr-1\", 4, \"ngIf\"], [\"class\", \"btn btn-sm btn-danger mr-1\", 4, \"ngIf\"], [1, \"btn\", \"btn-sm\", \"btn-outline-light\", 3, \"click\"], [1, \"row\", \"m-2\"], [1, \"col\", \"col-md-5\", \"video-container\"], [1, \"card\", \"shadow\", \"mb-4\", \"d-flex\", \"align-items-stretch\"], [1, \"card-header\", \"text-white\", \"bg-secondary\"], [1, \"boundingboxes\"], [\"width\", \"640\", \"height\", \"480\"], [4, \"ngFor\", \"ngForOf\"], [1, \"card-body\"], [\"id\", \"remoteview\", \"width\", \"640\", \"height\", \"480\", \"autoplay\", \"\", \"playsinline\", \"\", \"controls\", \"\"], [\"id\", \"canvas\", \"width\", \"640\", \"height\", \"480\", 2, \"display\", \"none\"], [\"class\", \"m-1 btn btn-sm btn-success\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"m-1 btn btn-sm btn-danger\", 3, \"click\", 4, \"ngIf\"], [1, \"col\", \"col-md-2\"], [1, \"row\"], [1, \"col\"], [3, \"thingName\"], [1, \"col\", \"col-md-5\"], [1, \"col\", \"col-md-6\"], [1, \"card\", \"shadow\", \"mb-4\", \"d-flex\", \"align-items-stretch\", \"h-100\"], [1, \"card-body\", \"h-100\", \"overflow-auto\"], [1, \"input-group\"], [1, \"input-group-prepen\"], [1, \"input-group-text\"], [\"type\", \"text\", \"aria-label\", \"Find Something\", \"aria-describedby\", \"add-find-item\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"add-find-item\", \"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"row\", \"mt-2\"], [1, \"card\", \"m-1\"], [1, \"card-header\", \"bg-light\"], [\"type\", \"button\", \"class\", \"btn btn-sm btn-primary m-2\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"class\", \"btn btn-sm btn-success m-2\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"min\", \"25\", \"max\", \"100\", \"aria-label\", \"Percentage confidence\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"p-2\", 3, \"ngValue\"], [1, \"btn\", \"btn-sm\", \"btn-success\", \"mr-1\"], [1, \"badge\", \"badge-success\", \"p-1\", \"align-right\"], [1, \"btn\", \"btn-sm\", \"btn-danger\", \"mr-1\"], [1, \"badge\", \"badge-danger\", \"p-1\", \"align-right\"], [1, \"box\"], [1, \"boxtext\"], [1, \"m-1\", \"btn\", \"btn-sm\", \"btn-success\", 3, \"click\"], [1, \"m-1\", \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-primary\", \"m-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-success\", \"m-2\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"button\", 2);\n          i0.ɵɵelement(3, \"span\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"a\", 4);\n          i0.ɵɵtext(5, \"\\u00A0 AWS IoT PiBot\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6)(8, \"select\", 7);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_8_listener($event) {\n            return ctx.thingName = $event;\n          })(\"change\", function DashboardComponent_Template_select_change_8_listener() {\n            return ctx.setThingName();\n          });\n          i0.ɵɵtemplate(9, DashboardComponent_option_9_Template, 2, 2, \"option\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"ul\", 9)(11, \"li\", 10)(12, \"h5\", 11);\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"li\", 12);\n          i0.ɵɵtemplate(15, DashboardComponent_button_15_Template, 3, 0, \"button\", 13);\n          i0.ɵɵtemplate(16, DashboardComponent_button_16_Template, 3, 0, \"button\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"li\", 12);\n          i0.ɵɵtemplate(18, DashboardComponent_button_18_Template, 3, 0, \"button\", 13);\n          i0.ɵɵtemplate(19, DashboardComponent_button_19_Template, 3, 0, \"button\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"li\", 12);\n          i0.ɵɵtemplate(21, DashboardComponent_button_21_Template, 3, 0, \"button\", 13);\n          i0.ɵɵtemplate(22, DashboardComponent_button_22_Template, 3, 0, \"button\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"li\", 12)(24, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_24_listener() {\n            return ctx.logout();\n          });\n          i0.ɵɵtext(25, \"Logout\");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(26, \"div\", 1)(27, \"div\", 16)(28, \"div\", 17)(29, \"div\", 18)(30, \"div\", 19)(31, \"h4\");\n          i0.ɵɵtext(32, \"Video Stream\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"div\", 20);\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(34, \"svg\", 21);\n          i0.ɵɵtemplate(35, DashboardComponent__svg_g_35_Template, 4, 7, \"g\", 22);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵnamespaceHTML();\n          i0.ɵɵelementStart(36, \"div\", 23);\n          i0.ɵɵelement(37, \"video\", 24);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"canvas\", 25);\n          i0.ɵɵtemplate(39, DashboardComponent_button_39_Template, 2, 0, \"button\", 26);\n          i0.ɵɵtemplate(40, DashboardComponent_button_40_Template, 2, 0, \"button\", 27);\n          i0.ɵɵtemplate(41, DashboardComponent_button_41_Template, 2, 0, \"button\", 26);\n          i0.ɵɵtemplate(42, DashboardComponent_button_42_Template, 2, 0, \"button\", 27);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(43, \"div\", 28)(44, \"div\", 29)(45, \"div\", 30);\n          i0.ɵɵelement(46, \"app-joymove\", 31);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(47, \"div\", 29)(48, \"div\", 30);\n          i0.ɵɵelement(49, \"app-joycam\", 31);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(50, \"div\", 32);\n          i0.ɵɵelement(51, \"app-map\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(52, \"div\", 16)(53, \"div\", 33)(54, \"div\", 34)(55, \"div\", 19)(56, \"h4\");\n          i0.ɵɵtext(57, \"What do you want to look for?\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(58, \"div\", 35)(59, \"div\", 36)(60, \"div\", 37)(61, \"span\", 38);\n          i0.ɵɵtext(62, \"Find:\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(63, \"input\", 39);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_63_listener($event) {\n            return ctx.findLabel = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(64, \"button\", 40);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_64_listener() {\n            return ctx.addFindItem(ctx.findLabel);\n          });\n          i0.ɵɵtext(65, \"Add\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(66, \"div\", 41)(67, \"div\", 30)(68, \"div\", 42)(69, \"div\", 43)(70, \"h4\");\n          i0.ɵɵtext(71, \"Looking For\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(72, \"div\", 23);\n          i0.ɵɵtemplate(73, DashboardComponent_button_73_Template, 2, 1, \"button\", 44);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(74, \"div\", 30)(75, \"div\", 42)(76, \"div\", 43)(77, \"h4\");\n          i0.ɵɵtext(78, \"Found\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(79, \"div\", 23);\n          i0.ɵɵtemplate(80, DashboardComponent_button_80_Template, 2, 1, \"button\", 45);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(81, \"div\", 33)(82, \"div\", 34)(83, \"div\", 19)(84, \"h4\");\n          i0.ɵɵtext(85, \"Detected Objects\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(86, \"div\", 35)(87, \"div\", 36)(88, \"div\", 37)(89, \"span\", 38);\n          i0.ɵɵtext(90, \"Minimum Confidence %\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(91, \"input\", 46);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_91_listener($event) {\n            return ctx.confidence = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(92, DashboardComponent_button_92_Template, 2, 2, \"button\", 44);\n          i0.ɵɵpipe(93, \"slice\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.thingName);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableThings);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\"Selected Robot: \", ctx.thingName, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.devicesConnected[\"pi-remote\"] == \"connected\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.devicesConnected[\"pi-remote\"] == \"disconnected\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.devicesConnected[ctx.thingName] == \"connected\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.devicesConnected[ctx.thingName] == \"disconnected\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.mqttConnected);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.mqttConnected);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngForOf\", ctx.boundingBoxes);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.stream == \"no\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.stream == \"yes\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.detect == \"no\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.detect == \"yes\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"thingName\", ctx.thingName);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"thingName\", ctx.thingName);\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"ngModel\", ctx.findLabel);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngForOf\", ctx.findLabels);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.foundLabels);\n          i0.ɵɵadvance(11);\n          i0.ɵɵproperty(\"ngModel\", ctx.confidence);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(93, 21, ctx.detectedLabels, -10));\n        }\n      },\n      styles: [\".boundingboxes[_ngcontent-%COMP%] {\\n        top: 100;\\n        position: absolute;\\n        display: block;\\n        background-color: transparent;\\n        overflow: hidden;\\n        z-index: 9999;\\n    }\\n    .box[_ngcontent-%COMP%] {\\n        fill: none;\\n        stroke-width: 2px;\\n        stroke: green;\\n        shape-rendering: crispEdges;\\n    }\\n    .boxtext[_ngcontent-%COMP%] {\\n        fill: green;\\n    }\"]\n    });\n  }\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}