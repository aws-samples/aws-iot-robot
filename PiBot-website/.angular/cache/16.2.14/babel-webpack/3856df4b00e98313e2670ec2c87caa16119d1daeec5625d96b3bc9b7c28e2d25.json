{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../mqtt.service\";\nexport let JoycamComponent = /*#__PURE__*/(() => {\n  class JoycamComponent {\n    constructor(mqttService) {\n      this.mqttService = mqttService;\n    }\n    ngOnChanges(changes) {\n      this.thingName = changes['thingName']['currentValue'];\n      this.mqttTopic = \"$aws/things/\" + this.thingName + \"/shadow/update\";\n    }\n    ngOnInit() {\n      this.stick = document.getElementById('joyCam');\n      this.maxMove = 64;\n      this.minMove = 8;\n      fromEvent(this.stick, 'mousedown').subscribe(evt => this.select(evt));\n      fromEvent(this.stick, 'touchstart').subscribe(evt => this.select(evt));\n      fromEvent(document, 'mousemove').subscribe(evt => this.move(evt));\n      fromEvent(document, 'touchmove').subscribe(evt => this.move(evt));\n      fromEvent(document, 'mouseup').subscribe(evt => this.release(evt));\n      fromEvent(document, 'touchend').subscribe(evt => this.release(evt));\n      this.dragStart = null;\n      this.touchId = null;\n      this.active = false;\n      this.value = {\n        x: 0,\n        y: 0\n      };\n      this.mqttPayload = {\n        'cam_x': \"S\",\n        'cam_y': \"S\"\n      };\n    }\n    select(event) {\n      this.active = true;\n      this.stick.style.transition = '0s';\n      event.preventDefault();\n      if (event.changedTouches) {\n        this.dragStart = {\n          x: event.changedTouches[0].clientX,\n          y: event.changedTouches[0].clientY\n        };\n      } else {\n        this.dragStart = {\n          x: event.clientX,\n          y: event.clientY\n        };\n      }\n      if (event.changedTouches) {\n        this.touchId = event.changedTouches[0].identifier;\n      }\n    }\n    move(event) {\n      if (!this.active) return;\n      let touchmoveId = null;\n      if (event.changedTouches) {\n        for (let i = 0; i < event.changedTouches.length; i++) {\n          if (this.touchId == event.changedTouches[i].identifier) {\n            touchmoveId = i;\n            event.clientX = event.changedTouches[i].clientX;\n            event.clientY = event.changedTouches[i].clientY;\n          }\n        }\n        if (touchmoveId == null) return;\n      }\n      const xDiff = event.clientX - this.dragStart.x;\n      const yDiff = event.clientY - this.dragStart.y;\n      const angle = Math.atan2(yDiff, xDiff);\n      const distance = Math.min(this.maxMove, Math.hypot(xDiff, yDiff));\n      const xPosition = distance * Math.cos(angle);\n      const yPosition = distance * Math.sin(angle);\n      this.stick.style.transform = `translate3d(${xPosition}px, ${yPosition}px, 0px)`;\n      const distance2 = distance < this.minMove ? 0 : this.maxMove / (this.maxMove - this.minMove) * (distance - this.minMove);\n      const xPosition2 = distance2 * Math.cos(angle);\n      const yPosition2 = distance2 * Math.sin(angle);\n      const xPercent = parseFloat((xPosition2 / this.maxMove).toFixed(4));\n      const yPercent = parseFloat((yPosition2 / this.maxMove).toFixed(4));\n      this.value = {\n        x: xPercent,\n        y: yPercent\n      };\n    }\n    release(event) {\n      if (!this.active) return;\n      if (event.changedTouches && this.touchId != event.changedTouches[0].identifier) return;\n      this.mqttPayload.cam_x = this.value.x * 90 + 90;\n      this.mqttPayload.cam_y = 180 - (this.value.y * 90 + 90);\n      this.active = false;\n      this.touchId = null;\n      this.sendMqttMessage();\n    }\n    sendMqttMessage() {\n      let full_msg = {\n        \"state\": {\n          \"desired\": {\n            \"direction\": this.mqttPayload\n          }\n        }\n      };\n      console.log(\"Full payload:\", full_msg);\n      this.mqttService.sendMessage(this.mqttTopic, JSON.stringify(full_msg));\n    }\n    static #_ = this.ɵfac = function JoycamComponent_Factory(t) {\n      return new (t || JoycamComponent)(i0.ɵɵdirectiveInject(i1.MqttService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: JoycamComponent,\n      selectors: [[\"app-joycam\"]],\n      inputs: {\n        thingName: \"thingName\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 10,\n      vars: 0,\n      consts: [[1, \"card\", \"shadow\", \"mb-4\", \"d-flex\", \"align-items-stretch\"], [1, \"card-header\", \"text-white\", \"bg-secondary\"], [1, \"card-body\"], [1, \"row\", \"justify-content-center\"], [1, \"col\", \"d-flex\", \"justify-content-center\", 2, \"width\", \"128px\"], [\"src\", \"assets/joystick-base.png\"], [\"id\", \"joyCam\", 1, \"position-absolute\", \"d-flex\", \"justify-content-center\", \"align-self-center\"], [\"src\", \"assets/joystick-yellow.png\"]],\n      template: function JoycamComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h4\");\n          i0.ɵɵtext(3, \"Camera Control\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"div\", 4);\n          i0.ɵɵelement(7, \"img\", 5);\n          i0.ɵɵelementStart(8, \"div\", 6);\n          i0.ɵɵelement(9, \"img\", 7);\n          i0.ɵɵelementEnd()()()()();\n        }\n      }\n    });\n  }\n  return JoycamComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}