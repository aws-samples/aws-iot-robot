{"ast":null,"code":"var AWS = require('../core');\nvar util = AWS.util;\nvar typeOf = require('./types').typeOf;\nvar DynamoDBSet = require('./set');\nvar NumberValue = require('./numberValue');\nAWS.DynamoDB.Converter = {\n  /**\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\n   *\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\n   *\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\n   *    convert entire records (rather than individual attributes)\n   */\n  input: function convertInput(data, options) {\n    options = options || {};\n    var type = typeOf(data);\n    if (type === 'Object') {\n      return formatMap(data, options);\n    } else if (type === 'Array') {\n      return formatList(data, options);\n    } else if (type === 'Set') {\n      return formatSet(data, options);\n    } else if (type === 'String') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n      return {\n        S: data\n      };\n    } else if (type === 'Number' || type === 'NumberValue') {\n      return {\n        N: data.toString()\n      };\n    } else if (type === 'Binary') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n      return {\n        B: data\n      };\n    } else if (type === 'Boolean') {\n      return {\n        BOOL: data\n      };\n    } else if (type === 'null') {\n      return {\n        NULL: true\n      };\n    } else if (type !== 'undefined' && type !== 'Function') {\n      // this value has a custom constructor\n      return formatMap(data, options);\n    }\n  },\n  /**\n   * Convert a JavaScript object into a DynamoDB record.\n   *\n   * @param data [any] The data to convert to a DynamoDB record\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [map] An object in the DynamoDB record format.\n   *\n   * @example Convert a JavaScript object into a DynamoDB record\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\n   *    string: 'foo',\n   *    list: ['fizz', 'buzz', 'pop'],\n   *    map: {\n   *      nestedMap: {\n   *        key: 'value',\n   *      }\n   *    },\n   *    number: 123,\n   *    nullValue: null,\n   *    boolValue: true,\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\n   *  });\n   */\n  marshall: function marshallItem(data, options) {\n    return AWS.DynamoDB.Converter.input(data, options).M;\n  },\n  /**\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\n   *\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [Object|Array|String|Number|Boolean|null]\n   *\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\n   *    convert entire records (rather than individual attributes)\n   */\n  output: function convertOutput(data, options) {\n    options = options || {};\n    var list, map, i;\n    for (var type in data) {\n      var values = data[type];\n      if (type === 'M') {\n        map = {};\n        for (var key in values) {\n          map[key] = convertOutput(values[key], options);\n        }\n        return map;\n      } else if (type === 'L') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(convertOutput(values[i], options));\n        }\n        return list;\n      } else if (type === 'SS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(values[i] + '');\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'NS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(convertNumber(values[i], options.wrapNumbers));\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'BS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(AWS.util.buffer.toBuffer(values[i]));\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'S') {\n        return values + '';\n      } else if (type === 'N') {\n        return convertNumber(values, options.wrapNumbers);\n      } else if (type === 'B') {\n        return util.buffer.toBuffer(values);\n      } else if (type === 'BOOL') {\n        return values === 'true' || values === 'TRUE' || values === true;\n      } else if (type === 'NULL') {\n        return null;\n      }\n    }\n  },\n  /**\n   * Convert a DynamoDB record into a JavaScript object.\n   *\n   * @param data [any] The DynamoDB record\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [map] An object whose properties have been converted from\n   *    DynamoDB's AttributeValue format into their corresponding native\n   *    JavaScript types.\n   *\n   * @example Convert a record received from a DynamoDB stream\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\n   *    string: {S: 'foo'},\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\n   *    map: {\n   *      M: {\n   *        nestedMap: {\n   *          M: {\n   *            key: {S: 'value'}\n   *          }\n   *        }\n   *      }\n   *    },\n   *    number: {N: '123'},\n   *    nullValue: {NULL: true},\n   *    boolValue: {BOOL: true}\n   *  });\n   */\n  unmarshall: function unmarshall(data, options) {\n    return AWS.DynamoDB.Converter.output({\n      M: data\n    }, options);\n  }\n};\n\n/**\n * @api private\n * @param data [Array]\n * @param options [map]\n */\nfunction formatList(data, options) {\n  var list = {\n    L: []\n  };\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\n  }\n  return list;\n}\n\n/**\n * @api private\n * @param value [String]\n * @param wrapNumbers [Boolean]\n */\nfunction convertNumber(value, wrapNumbers) {\n  return wrapNumbers ? new NumberValue(value) : Number(value);\n}\n\n/**\n * @api private\n * @param data [map]\n * @param options [map]\n */\nfunction formatMap(data, options) {\n  var map = {\n    M: {}\n  };\n  for (var key in data) {\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n    if (values.length === 0) {\n      return AWS.DynamoDB.Converter.input(null);\n    }\n  }\n  var map = {};\n  switch (data.type) {\n    case 'String':\n      map['SS'] = values;\n      break;\n    case 'Binary':\n      map['BS'] = values;\n      break;\n    case 'Number':\n      map['NS'] = values.map(function (value) {\n        return value.toString();\n      });\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction filterEmptySetValues(set) {\n  var nonEmptyValues = [];\n  var potentiallyEmptyTypes = {\n    String: true,\n    Binary: true,\n    Number: false\n  };\n  if (potentiallyEmptyTypes[set.type]) {\n    for (var i = 0; i < set.values.length; i++) {\n      if (set.values[i].length === 0) {\n        continue;\n      }\n      nonEmptyValues.push(set.values[i]);\n    }\n    return nonEmptyValues;\n  }\n  return set.values;\n}\n\n/**\n * @api private\n */\nmodule.exports = AWS.DynamoDB.Converter;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}