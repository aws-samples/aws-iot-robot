{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LinkedListNode = /** @class */function () {\n  function LinkedListNode(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n  return LinkedListNode;\n}();\nvar LRUCache = /** @class */function () {\n  function LRUCache(size) {\n    this.nodeMap = {};\n    this.size = 0;\n    if (typeof size !== 'number' || size < 1) {\n      throw new Error('Cache size can only be positive number');\n    }\n    this.sizeLimit = size;\n  }\n  Object.defineProperty(LRUCache.prototype, \"length\", {\n    get: function () {\n      return this.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  LRUCache.prototype.prependToList = function (node) {\n    if (!this.headerNode) {\n      this.tailNode = node;\n    } else {\n      this.headerNode.prev = node;\n      node.next = this.headerNode;\n    }\n    this.headerNode = node;\n    this.size++;\n  };\n  LRUCache.prototype.removeFromTail = function () {\n    if (!this.tailNode) {\n      return undefined;\n    }\n    var node = this.tailNode;\n    var prevNode = node.prev;\n    if (prevNode) {\n      prevNode.next = undefined;\n    }\n    node.prev = undefined;\n    this.tailNode = prevNode;\n    this.size--;\n    return node;\n  };\n  LRUCache.prototype.detachFromList = function (node) {\n    if (this.headerNode === node) {\n      this.headerNode = node.next;\n    }\n    if (this.tailNode === node) {\n      this.tailNode = node.prev;\n    }\n    if (node.prev) {\n      node.prev.next = node.next;\n    }\n    if (node.next) {\n      node.next.prev = node.prev;\n    }\n    node.next = undefined;\n    node.prev = undefined;\n    this.size--;\n  };\n  LRUCache.prototype.get = function (key) {\n    if (this.nodeMap[key]) {\n      var node = this.nodeMap[key];\n      this.detachFromList(node);\n      this.prependToList(node);\n      return node.value;\n    }\n  };\n  LRUCache.prototype.remove = function (key) {\n    if (this.nodeMap[key]) {\n      var node = this.nodeMap[key];\n      this.detachFromList(node);\n      delete this.nodeMap[key];\n    }\n  };\n  LRUCache.prototype.put = function (key, value) {\n    if (this.nodeMap[key]) {\n      this.remove(key);\n    } else if (this.size === this.sizeLimit) {\n      var tailNode = this.removeFromTail();\n      var key_1 = tailNode.key;\n      delete this.nodeMap[key_1];\n    }\n    var newNode = new LinkedListNode(key, value);\n    this.nodeMap[key] = newNode;\n    this.prependToList(newNode);\n  };\n  LRUCache.prototype.empty = function () {\n    var keys = Object.keys(this.nodeMap);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var node = this.nodeMap[key];\n      this.detachFromList(node);\n      delete this.nodeMap[key];\n    }\n  };\n  return LRUCache;\n}();\nexports.LRUCache = LRUCache;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}