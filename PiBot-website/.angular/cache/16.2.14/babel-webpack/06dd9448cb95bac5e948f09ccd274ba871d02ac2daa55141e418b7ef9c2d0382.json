{"ast":null,"code":"var util = require('../util');\nfunction JsonParser() {}\nJsonParser.prototype.parse = function (value, shape) {\n  return translate(JSON.parse(value), shape);\n};\nfunction translate(value, shape) {\n  if (!shape || value === undefined) return undefined;\n  switch (shape.type) {\n    case 'structure':\n      return translateStructure(value, shape);\n    case 'map':\n      return translateMap(value, shape);\n    case 'list':\n      return translateList(value, shape);\n    default:\n      return translateScalar(value, shape);\n  }\n}\nfunction translateStructure(structure, shape) {\n  if (structure == null) return undefined;\n  if (shape.isDocument) return structure;\n  var struct = {};\n  var shapeMembers = shape.members;\n  var isAwsQueryCompatible = shape.api && shape.api.awsQueryCompatible;\n  util.each(shapeMembers, function (name, memberShape) {\n    var locationName = memberShape.isLocationName ? memberShape.name : name;\n    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {\n      var value = structure[locationName];\n      var result = translate(value, memberShape);\n      if (result !== undefined) struct[name] = result;\n    } else if (isAwsQueryCompatible && memberShape.defaultValue) {\n      if (memberShape.type === 'list') {\n        struct[name] = typeof memberShape.defaultValue === 'function' ? memberShape.defaultValue() : memberShape.defaultValue;\n      }\n    }\n  });\n  return struct;\n}\nfunction translateList(list, shape) {\n  if (list == null) return undefined;\n  var out = [];\n  util.arrayEach(list, function (value) {\n    var result = translate(value, shape.member);\n    if (result === undefined) out.push(null);else out.push(result);\n  });\n  return out;\n}\nfunction translateMap(map, shape) {\n  if (map == null) return undefined;\n  var out = {};\n  util.each(map, function (key, value) {\n    var result = translate(value, shape.value);\n    if (result === undefined) out[key] = null;else out[key] = result;\n  });\n  return out;\n}\nfunction translateScalar(value, shape) {\n  return shape.toType(value);\n}\n\n/**\n * @api private\n */\nmodule.exports = JsonParser;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}