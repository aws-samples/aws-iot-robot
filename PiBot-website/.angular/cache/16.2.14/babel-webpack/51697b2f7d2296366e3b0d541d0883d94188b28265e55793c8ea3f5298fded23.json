{"ast":null,"code":"var hashUtils = require('./browserHashUtils');\n\n/**\n * @api private\n */\nfunction Hmac(hashCtor, secret) {\n  this.hash = new hashCtor();\n  this.outer = new hashCtor();\n  var inner = bufferFromSecret(hashCtor, secret);\n  var outer = new Uint8Array(hashCtor.BLOCK_SIZE);\n  outer.set(inner);\n  for (var i = 0; i < hashCtor.BLOCK_SIZE; i++) {\n    inner[i] ^= 0x36;\n    outer[i] ^= 0x5c;\n  }\n  this.hash.update(inner);\n  this.outer.update(outer);\n\n  // Zero out the copied key buffer.\n  for (var i = 0; i < inner.byteLength; i++) {\n    inner[i] = 0;\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = exports = Hmac;\nHmac.prototype.update = function (toHash) {\n  if (hashUtils.isEmptyData(toHash) || this.error) {\n    return this;\n  }\n  try {\n    this.hash.update(hashUtils.convertToBuffer(toHash));\n  } catch (e) {\n    this.error = e;\n  }\n  return this;\n};\nHmac.prototype.digest = function (encoding) {\n  if (!this.outer.finished) {\n    this.outer.update(this.hash.digest());\n  }\n  return this.outer.digest(encoding);\n};\nfunction bufferFromSecret(hashCtor, secret) {\n  var input = hashUtils.convertToBuffer(secret);\n  if (input.byteLength > hashCtor.BLOCK_SIZE) {\n    var bufferHash = new hashCtor();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n  var buffer = new Uint8Array(hashCtor.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}