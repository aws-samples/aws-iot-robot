{"ast":null,"code":"var util = require('../util');\nvar AWS = require('../core');\n\n/**\n * Prepend prefix defined by API model to endpoint that's already\n * constructed. This feature does not apply to operations using\n * endpoint discovery and can be disabled.\n * @api private\n */\nfunction populateHostPrefix(request) {\n  var enabled = request.service.config.hostPrefixEnabled;\n  if (!enabled) return request;\n  var operationModel = request.service.api.operations[request.operation];\n  //don't marshal host prefix when operation has endpoint discovery traits\n  if (hasEndpointDiscover(request)) return request;\n  if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {\n    var hostPrefixNotation = operationModel.endpoint.hostPrefix;\n    var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);\n    prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);\n    validateHostname(request.httpRequest.endpoint.hostname);\n  }\n  return request;\n}\n\n/**\n * @api private\n */\nfunction hasEndpointDiscover(request) {\n  var api = request.service.api;\n  var operationModel = api.operations[request.operation];\n  var isEndpointOperation = api.endpointOperation && api.endpointOperation === util.string.lowerFirst(operationModel.name);\n  return operationModel.endpointDiscoveryRequired !== 'NULL' || isEndpointOperation === true;\n}\n\n/**\n * @api private\n */\nfunction expandHostPrefix(hostPrefixNotation, params, shape) {\n  util.each(shape.members, function (name, member) {\n    if (member.hostLabel === true) {\n      if (typeof params[name] !== 'string' || params[name] === '') {\n        throw util.error(new Error(), {\n          message: 'Parameter ' + name + ' should be a non-empty string.',\n          code: 'InvalidParameter'\n        });\n      }\n      var regex = new RegExp('\\\\{' + name + '\\\\}', 'g');\n      hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);\n    }\n  });\n  return hostPrefixNotation;\n}\n\n/**\n * @api private\n */\nfunction prependEndpointPrefix(endpoint, prefix) {\n  if (endpoint.host) {\n    endpoint.host = prefix + endpoint.host;\n  }\n  if (endpoint.hostname) {\n    endpoint.hostname = prefix + endpoint.hostname;\n  }\n}\n\n/**\n * @api private\n */\nfunction validateHostname(hostname) {\n  var labels = hostname.split('.');\n  //Reference: https://tools.ietf.org/html/rfc1123#section-2\n  var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]$/;\n  util.arrayEach(labels, function (label) {\n    if (!label.length || label.length < 1 || label.length > 63) {\n      throw util.error(new Error(), {\n        code: 'ValidationError',\n        message: 'Hostname label length should be between 1 to 63 characters, inclusive.'\n      });\n    }\n    if (!hostPattern.test(label)) {\n      throw AWS.util.error(new Error(), {\n        code: 'ValidationError',\n        message: label + ' is not hostname compatible.'\n      });\n    }\n  });\n}\nmodule.exports = {\n  populateHostPrefix: populateHostPrefix\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}